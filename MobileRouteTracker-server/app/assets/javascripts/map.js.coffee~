# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/




 function addMarker(layer, lon, lat, popupContentHTML) {
 
	// Koordinaten in LonLat umwandeln
	var ll = new OpenLayers.LonLat(lon, lat).transform(
		new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
		new OpenLayers.Projection("EPSG:900913") // to Spherical Mercator Projection
	);

	// Feature erstellen und konfigurieren (Popup und Marker)
	var feature = new OpenLayers.Feature(layer, ll);
	feature.closeBox = false;
	feature.popupClass = OpenLayers.Class(OpenLayers.Popup.FramedCloud, {minSize: new OpenLayers.Size(200, 100) } );
	feature.data.popupContentHTML = popupContentHTML;
	feature.data.overflow = "auto";

	// Marker erstellen
	var marker = feature.createMarker();
 
	/*
	 * Handler Funktionen fÃ¼r die Mouse-Events
	 */
	// Hover
	var markerHover = function(evt) {
		// Wenn das Popup nicht sichtbar ist, dann kann es nicht fest sichtbar sein
		if (!this.popup.visible()) {
			this.popup.clicked = false;
		}
		if (!this.popup.clicked) {
			this.popup.show();
		}
		OpenLayers.Event.stop(evt);
	}

	// Hover End
	var markerHoverEnd = function(evt) {
		if (!this.popup.clicked) {
			this.popup.hide();
		}
		OpenLayers.Event.stop(evt);
	}

	// Events auf den Marker registrieren und als Objekt das Feature Ã¼bergeben
	marker.events.register("mouseover", feature, markerHover);
	marker.events.register("mouseout", feature, markerHoverEnd);

	// Erstellten Marker der Ebene hinzufÃ¼gen
	layer.addMarker(marker);

	// Popup erstellen, der Karte hinzufÃ¼gen und anzeigen, falls gewÃ¼nscht
	map.addPopup(feature.createPopup(feature.closeBox));

	feature.popup.hide();
	feature.popup.clicked = false;

	return marker;
}
